20-10-13 17:56:51.380 - INFO:   name: PANx3_DF2K
  suffix: None
  model: sr
  distortion: sr
  scale: 3
  crop_border: None
  save_img: True
  gpu_ids: [0]
  datasets:[
    test1:[
      name: Set5
      mode: LQGT
      dataroot_GT: /mnt/hyzhao/Documents/datasets/benchmark/Set5/HR
      dataroot_LQ: /mnt/hyzhao/Documents/datasets/benchmark/Set5/LR_bicubic/X3
      phase: test1
      scale: 3
      data_type: img
    ]
    test2:[
      name: Set14
      mode: LQGT
      dataroot_GT: /mnt/hyzhao/Documents/datasets/benchmark/Set14/HR
      dataroot_LQ: /mnt/hyzhao/Documents/datasets/benchmark/Set14/LR_bicubic/X3
      phase: test2
      scale: 3
      data_type: img
    ]
    test3:[
      name: B100
      mode: LQGT
      dataroot_GT: /mnt/hyzhao/Documents/datasets/benchmark/B100/HR
      dataroot_LQ: /mnt/hyzhao/Documents/datasets/benchmark/B100/LR_bicubic/X3
      phase: test3
      scale: 3
      data_type: img
    ]
    test4:[
      name: Urban100
      mode: LQGT
      dataroot_GT: /mnt/hyzhao/Documents/datasets/benchmark/Urban100/HR
      dataroot_LQ: /mnt/hyzhao/Documents/datasets/benchmark/Urban100/LR_bicubic/X3
      phase: test4
      scale: 3
      data_type: img
    ]
    test5:[
      name: Manga109
      mode: LQGT
      dataroot_GT: /mnt/hyzhao/Documents/datasets/benchmark/Manga109/HR
      dataroot_LQ: /mnt/hyzhao/Documents/datasets/benchmark/Manga109/LR_bicubic/X3
      phase: test5
      scale: 3
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: PAN
    in_nc: 3
    out_nc: 3
    nf: 40
    unf: 24
    nb: 16
    scale: 3
  ]
  path:[
    pretrain_model_G: ../experiments/pretrained_models/PANx3_DF2K.pth
    root: /mnt/hyzhao/Documents/PAN
    results_root: /mnt/hyzhao/Documents/PAN/results/PANx3_DF2K
    log: /mnt/hyzhao/Documents/PAN/results/PANx3_DF2K
  ]
  is_train: False

20-10-13 17:56:51.383 - INFO: Dataset [LQGTDataset - Set5] is created.
20-10-13 17:56:51.383 - INFO: Number of test images in [Set5]: 5
20-10-13 17:56:51.383 - INFO: Dataset [LQGTDataset - Set14] is created.
20-10-13 17:56:51.383 - INFO: Number of test images in [Set14]: 14
20-10-13 17:56:51.385 - INFO: Dataset [LQGTDataset - B100] is created.
20-10-13 17:56:51.385 - INFO: Number of test images in [B100]: 100
20-10-13 17:56:51.387 - INFO: Dataset [LQGTDataset - Urban100] is created.
20-10-13 17:56:51.387 - INFO: Number of test images in [Urban100]: 100
20-10-13 17:56:51.389 - INFO: Dataset [LQGTDataset - Manga109] is created.
20-10-13 17:56:51.389 - INFO: Number of test images in [Manga109]: 109
20-10-13 17:56:57.461 - INFO: Network G structure: DataParallel - PAN, with parameters: 261,403
20-10-13 17:56:57.462 - INFO: PAN(
  (conv_first): Conv2d(3, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (SCPA_trunk): Sequential(
    (0): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (1): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (2): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (3): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (4): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (5): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (6): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (7): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (8): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (9): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (10): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (11): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (12): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (13): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (14): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (15): SCPA(
      (conv1_a): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv1_b): Conv2d(40, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (k1): Sequential(
        (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (PAConv): PAConv(
        (k2): Conv2d(20, 20, kernel_size=(1, 1), stride=(1, 1))
        (sigmoid): Sigmoid()
        (k3): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (k4): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv3): Conv2d(40, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (trunk_conv): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (upconv1): Conv2d(40, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (att1): PA(
    (conv): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
    (sigmoid): Sigmoid()
  )
  (HRconv1): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(24, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
20-10-13 17:56:57.462 - INFO: Loading model for G [../experiments/pretrained_models/PANx3_DF2K.pth] ...
20-10-13 17:56:57.476 - INFO: Model [SRModel] is created.
20-10-13 17:56:57.476 - INFO: 
Testing [Set5]...
20-10-13 17:56:58.454 - INFO: baby                 - PSNR: 31.207415 dB; SSIM: 0.890614; PSNR_Y: 32.695480 dB; SSIM_Y: 0.910029.
20-10-13 17:56:58.709 - INFO: bird                 - PSNR: 31.397268 dB; SSIM: 0.932784; PSNR_Y: 33.693345 dB; SSIM_Y: 0.952436.
20-10-13 17:56:58.961 - INFO: butterfly            - PSNR: 25.408211 dB; SSIM: 0.898530; PSNR_Y: 26.692616 dB; SSIM_Y: 0.914383.
20-10-13 17:56:59.219 - INFO: head                 - PSNR: 30.134886 dB; SSIM: 0.752487; PSNR_Y: 33.148110 dB; SSIM_Y: 0.825425.
20-10-13 17:56:59.373 - INFO: woman                - PSNR: 27.914993 dB; SSIM: 0.910897; PSNR_Y: 29.252232 dB; SSIM_Y: 0.922173.
20-10-13 17:56:59.420 - INFO: ----Average PSNR/SSIM results for Set5----
	PSNR: 29.212555 dB; SSIM: 0.877062

20-10-13 17:56:59.421 - INFO: ----Y channel, average PSNR/SSIM----
	PSNR_Y: 31.096357 dB; SSIM_Y: 0.904889

20-10-13 17:56:59.421 - INFO: 
Testing [Set14]...
20-10-13 17:56:59.991 - INFO: baboon               - PSNR: 21.707621 dB; SSIM: 0.559841; PSNR_Y: 23.810856 dB; SSIM_Y: 0.625554.
20-10-13 17:57:01.336 - INFO: barbara              - PSNR: 24.974926 dB; SSIM: 0.759808; PSNR_Y: 26.520512 dB; SSIM_Y: 0.790082.
